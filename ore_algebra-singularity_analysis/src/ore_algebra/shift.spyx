
#############################################################################
#  Copyright (C) 2013, 2014                                                 #
#                Manuel Kauers (mkauers@gmail.com),                         #
#                Maximilian Jaroschek (mjarosch@risc.jku.at),               #
#                Fredrik Johansson (fjohanss@risc.jku.at).                  #
#                                                                           #
#  Distributed under the terms of the GNU General Public License (GPL)      #
#  either version 2, or (at your option) any later version                  #
#                                                                           #
#  http://www.gnu.org/licenses/                                             #
#############################################################################


# Must be C++ because of an annoying NTL dependency in polynomial_integer_dense_flint.pxd
clang C++

from sage.rings.polynomial.polynomial_integer_dense_flint cimport Polynomial_integer_dense_flint
from sage.rings.polynomial.polynomial_zmod_flint cimport Polynomial_zmod_flint 

clib flint
include "sage/libs/flint/fmpz.pxi"
include "sage/libs/flint/fmpz_poly.pxi"

cdef extern from "flint/fmpz_poly.h":
    void fmpz_poly_taylor_shift(fmpz_poly_t f, fmpz_poly_t g, fmpz_t c)

def taylor_shift_univ_int_poly(Polynomial_integer_dense_flint poly, long c):
    cdef Polynomial_integer_dense_flint result
    cdef fmpz_t fc
    fmpz_init(fc)
    fmpz_set_si(fc, c)
    result = poly._new()
    fmpz_poly_taylor_shift(result.__poly, poly.__poly, fc)
    fmpz_clear(fc)
    return result

from sage.libs.flint.nmod_poly cimport *, nmod_poly_t
from sage.libs.flint.ulong_extras cimport *

include "sage/ext/stdsage.pxi"
include "sage/ext/cdefs.pxi"

cdef extern from "flint/nmod_poly.h":
    void nmod_poly_taylor_shift(nmod_poly_t f, nmod_poly_t g, mp_limb_t c)

def taylor_shift_univ_modp_poly(Polynomial_zmod_flint poly, long c):
    cdef Polynomial_zmod_flint result
    result = poly._new()
    nmod_poly_taylor_shift(&result.x, &poly.x, c % poly.parent().characteristic())
    return result

